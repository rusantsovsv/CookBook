"""
Вы пытаетесь провести поиск по блоку текстов с использованием регулярного вы-
ражения, но вам нужно, чтобы совпадение охватывало несколько строк.

Эта проблема обычно возникает в шаблонах, которые используют точку (.) для
поиска совпадения с любым символом. Многие забывают, что точка не может со-
впадать с символом новой строки. Например, вы пытаетесь найти совпадения
в комментариях в стиле языка С:
"""
import re

comment = re.compile(r'/\*(.*?)\*/')
text1 = '/* this is a comment */'
text2 = '''/* this is a
... multiline comment */
... '''

print(comment.findall(text1))
print(comment.findall(text2))

"""
Чтобы исправить проблему, вам нужно добавить поддержку символов новой
строки. Например:
"""
comment = re.compile(r'/\*((?:.|\n)*?)\*/')
print(comment.findall(text2))

"""
В этом шаблоне (?:.|\n) определяет незахватывающую группу (то есть выраже-
ние определяет группу для целей поиска совпадений, но эта группа не захватыва-
ется и не подсчитывается).
"""

"""
Функция re.compile() принимает полезный в данном случае флаг re.DOTALL. Он
заставляет . в регулярном выражении совпадать с любыми символами, включая
символ новой строки. Например:
"""
comment = re.compile(r'/\*(.*?)\*/', re.DOTALL)
print(comment.findall(text2))

"""
Использование флага re.DOTALL отлично работает в простых случаях, но это
может давать сбои при работе с очень сложными шаблонами или сочетанием от-
дельных регулярных выражений, которые должны объединяться друг с другом для
токенизации (как описано в рецепте 2.18). Если у вас есть выбор, обычно лучше
определить шаблон регулярного выражения, так чтобы он работал правильно без
необходимости в дополнительных флагах.
"""


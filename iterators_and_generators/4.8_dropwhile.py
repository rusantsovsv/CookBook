"""
Вы хотите итерировать по элементам в последовательности, но первые несколько
элементов вам неинтересны, и вы хотите их опустить.

В модуле itertools есть несколько функций, которые могут быть использованы для
решения этой задачи. Первая – itertools.dropwhile(). Чтобы использовать ее, вы
предоставляете функцию и итерируемый объект. Возвращаемый итератор отбра-
сывает первые элементы в последовательности до тех пор, пока предоставленная
функция возвращает True. А затем выдается вся оставшаяся последовательность.

Предположим, что вы читаете файл, который начинается со строчек с коммен-
тариями:
"""

with open('passw.txt') as f:
    for line in f:
        print(line, end='')
print()
print()
# Если вы хотите пропустить все начальные закомментированные строчки, вот как это можно сделать:

from itertools import dropwhile
with open('passw.txt') as f:
    for line in dropwhile(lambda line: line.startswith('#'), f):
        print(line, end='')

"""
Этот пример показывает, как можно пропустить первые элементы в соответ-
ствии с возвращаемым значением проверочной функции. Если так случилось, что
вы знаете точное количество элементов, которые хотите пропустить, то вы може-
те вместо вышеописанного способа использовать itertools.islice(). Например:
"""

from itertools import islice

items = ['a', 'b', 'c', 1, 4, 10, 15]
for x in islice(items, 2, None):
    print(x)

"""
В этом примере последний аргумент islice() None необходим для того, чтобы
обозначить, что вам нужно все за пределами первых трех элементов (а не первые
три элемента). То есть срез [3:], а не [:3].
"""

"""
Главное преимущество функций dropwhile() и islice() в том, что они позволяют из-
бежать написания грязного кода наподобие вот такого:
with open('/etc/passwd') as f:
    # Пропускаем начальные комментарии
    while True:
        line = next(f, '')
    if not line.startswith('#'):
        break
# Обрабатываем оставшиеся строки
while line:
    # Можно заменить полезной обработкой
    print(line, end='')
    line = next(f, None)
Отбрасывание первой части итерируемого объекта также немного отличает-
ся от простого фильтрования. Например, первая часть этого рецепта может быть
переписана вот так:
with open('/etc/passwd') as f:
    lines = (line for line in f if not line.startswith('#'))
    for line in lines:
        print(line, end='')
Очевидно, что это отбросит все закомментированные строчки в начале файла,
но такое решение отбросит и все остальные такие строчки во всем файле. С другой
стороны, решение, которое отбрасывает все элементы до тех пор, пока не будет
встречен элемент, не соответствующий условиям отбрасывания, подходит под
наши требования: все последующие элементы будут возвращены без фильтро-
вания.
Стоит отметить, что этот рецепт работает со всеми итерируемыми объектами,
включая те, размер которых нельзя оценить предварительно: генераторами, фай-
лами и другими подобными объектами.
"""
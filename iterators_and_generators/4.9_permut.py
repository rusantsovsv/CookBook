"""
Вы хотите проитерировать по всем возможным комбинациям и перестановкам
коллекции элементов.

Модуль itertools предоставляет три функции, подходящие для этой задачи. Первая,
itertools.permutations(), принимает коллекцию элементов и создает последователь-
ность кортежей со всеми возможными перестановками (то есть она перемешива-
ет их во всех возможных конфигурациях). Например:
"""

items = ['a', 'b', 'c']
from itertools import permutations

for p in permutations(items):
    print(p)

"""
Если вы хотите получить все возможные перестановки меньшей длины, то мо-
жете передать функции необязательный аргумент со значением длины. Напри-
мер:
"""

for p in permutations(items, 2):
    print(p)

"""
Используйте itertools.combinations(), чтобы создать последовательность комби-
наций элементов входной последовательности. Например:
"""
from itertools import combinations
for c in combinations(items, 3):
    print(c)
for c in combinations(items, 2):
    print(c)
for c in combinations(items, 1):
    print(c)

"""
Для функции combinations() порядок элементов не имеет значения. Комбина-
цию ('a', 'b') она считает аналогичной ('b', 'a') – поэтому вторая в выводимых ре-
зультатах отсутствует.
"""

"""
При создании комбинаций выбранные элементы удаляются из коллекции воз-
можных кандидатов (то есть если 'a' уже выбран, он больше не будет рассматри-
ваться). А функция itertools.combinations_with_replacement() выбирает один и тот
же элемент более одного раза. Например:
"""

from itertools import combinations_with_replacement
for c in combinations_with_replacement(items, 3):
    print(c)

"""
Этот рецепт показывает лишь небольшую часть мощи модуля itertools. Хотя вы
могли бы самостоятельно написать код, который выполняет перестановки и ком-
бинации, это, вероятно, отняло бы у вас больше пары секунд времени. Когда вы
сталкиваетесь с нетривиальными задачами в сфере итераций, обратитесь к itertools,
это всегда окупается. Если задача распространенная, велик шанс того, что
вы найдете готовое решение.
"""
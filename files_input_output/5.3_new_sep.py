"""
Вы хотите вывести данные с помощью print(), но вы также хотите поменять сим-
вол-разделитель или символ конца строки.

Используйте именнованные аргументы sep и end с функцией print(), чтобы изме-
нить вывод так, как вам нужно. Например:
"""

print('ACME', 50, 91.5)
print('ACME', 50, 91.5, sep=',')
print('ACME', 50, 91.5, sep=',', end='!!\n')

"""
Использование аргумента end также позволяет подавить добавление символа
новой строки при выводе. Например:
"""

for i in range(5):
    print(i)

for i in range(5):
    print(i, end=' ')
print()
"""
Использование print() с разными разделителями элементов часто является самым
простым способом вывести данные, когда вам нужно сделать это с другим разделителем элементов. 
Однако иногда вы можете увидеть, как программисты используют str.join() для выполнения этой же задачи:
"""

print(','.join(('ACME', '50', '91.5')))

"""
Проблема str.join() в том, что он работает только со строками. Это значит, что
часто необходимо выполнить различные акробатические трюки, чтобы заставить
его работать. Например:
"""

row = ('ACME', 50, 91.5)
# print(','.join(row))            # sequence item 1: expected str instance, int found
print(','.join(str(x) for x in row))

"""Вместо этого вы могли бы просто написать так:"""
print(*row, sep=',')

"""
Вам нужно прочитать или записать текстовые данные, представленные, возмож-
но, в различных кодировках, таких как ASCII, UTF-8 или UTF-16.

Используйте функцию open() в режиме rt для чтения текстового файла. Например:
"""
path = r'files\somefile.txt'

# прочесть остаток файла в одну строку
with open(path, 'rt') as f:
    data = f.read()

# итерируем по строчкам файла
with open(path, 'rt') as f:
    for line in f:
        pass

"""
Похожим образом для записи в текстовый файл используйте open() в режиме
wt (стирает и перезаписывает любое предыдущее содержание файла, если оно
было):
"""

# Пишем чанки (кусочки) текстовых данных
with open(path, 'wt') as f:
    f.write(data)
    pass

# перенаправленная инструкция print
line1 = 3
line2 = 5
line3 = 'Procshay, medved!'
line4 = 'Hi, medvedyara!!!'
with open(path, 'wt') as f:
    print(line1, file=f)
    print(line2, file=f)
    print(line3, file=f)
    print(line4, file=f)

"""
Чтобы добавить записываемый текст к концу существующего файла, исполь-
зуйте open() в режиме at.
По умолчанию файлы читаются и записываются в дефолтной системной ко-
дировке, информацию о которой можно получить из sys.getdefaultencoding(). На
большинстве компьютеров это будет utf-8. Если вы знаете, что текст, который вы
читаете или пишете, представлен в другой кодировке, передайте необязательный
параметр encoding функции open(). Например:
"""
with open(path, 'rt', encoding='latin-1') as f:
    pass

"""
Python понимает несколько сотен текстовых кодировок. Однако самые распро-
страненные – ascii, latin-1, utf-8 и utf-16. UTF-8 обычно является безопасным вы-
бором для работы с веб-приложениями. ascii соответствует 7-битным символам
в диапазоне от U+0000 до U+007F. latin-1 – это прямое отображение байтов 0–255
на символы Unicode от U-0000 до U-00FF. latin-1 известна тем, что она никогда не
вызовет ошибку декодирования при чтении текста в потенциально неизвестной
кодировке. Чтение файла как latin-1 может не привести к получению полностью
правильно декодированного текста, но этого бывает достаточно для извлечения
полезных данных. Также если вы позже запишете данные обратно, первоначаль-
ные данные будут сохранены.
"""

"""
Чтение и запись файлов в большинстве случаев совершенно бесхитростны. Однако
есть и тонкости. Во-первых, использование инструкции with в примере устанав-
ливает контекст, в котором будут использованы файлы. Когда поток управления
покидает блок with, файл будет автоматически закрыт. Вы не обязаны использо-
вать инструкцию with, но если вы ее не применяете, то не забудьте закрыть файл:
"""

file = open(path, 'rt')
data = file.read()
file.close()
print(data)

"""
Еще одна небольшая сложность касается распознавания новых строк, символы
которых отличаются в Unix и Windows (\n и \r\n). По умолчанию Python работа-
ет в так называемом «универсальном режиме новых строк». В этом режиме все
распространенные символы новой строки распознаются, и все они конвертиру-
ются в единственный \n при чтении. Похожим образом символ новой строки \n
конвертируется в дефолтный системный символ при выводе. Если вы не хотите
использовать такую трансляцию, передайте функции open() аргумент newline='':
"""

# читаем с отключенной трансляцией новой строки
with open(path, 'rt', newline='') as f:
    pass


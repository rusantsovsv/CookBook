"""
Вам нужно прочесть или записать бинарные данные, такие как содержимое кар-
тинок, звуковых файлов и т. п.

Используйте функцию open() в режиме rb или wb, чтобы читать и записывать би-
нарные данные. Например:
"""

# Прочесть весь файл как одну байтовую строку
with open(r'files\somefile.bin', 'rb') as f:
    data = f.read()

# записать бинарные данные в файл
with open(r'files\somefile.bin', 'wb') as f:
    f.write(b'Hello world')

"""
При чтении бинарных данных важно подчеркнуть, что все получаемые данные
будут в форме байтовых, а не текстовых строк. Похожим образом при записи вы
должны предоставить данные в форме объектов, которые представляют данные
в форме байтов (байтовые строки, объекты bytearray и т. д.).

При чтении бинарных данных тонкие сематические различия между байтовыми
и текстовыми строками могут привести к проблемам. Нужно помнить, что индексирование и 
итерирование возвращают целочисленное байтовое значение, а не байтовые строки. Например:
"""

# текстовая строка
t = 'Hello World'
print(t[0])

for c in t:
    print(c)

# байтовая строка
b = b'Hello world'
print(b[0])
for c in b:
    print(c)

"""
Если вам когда-либо потребуется прочесть текст из или записать в открытый
в бинарном режиме файл, убедитесь, что не забыли декодировать или закодиро-
вать его. Например:
"""
print('-'*30)
with open(r'files\somefile.bin', 'rb') as f:
    data = f.read(16)
    text = data.decode('utf-8')

with open(r'files\somefile.bin', 'wb') as f:
    text = 'Hello World'
    f.write(text.encode('utf-8'))

"""
Менее известный аспект бинарного ввода-вывода заключается в том, что такие
объекты, как массивы и структуры языка C, могут быть использованы для записи
без какого-либо промежуточного преобразования в объект bytes. Например:
"""

import array
nums = array.array('i', [1, 2, 3, 4])
with open(r'files\data.bin', 'wb') as f:
    f.write(nums)

"""
Это применимо к любому объекту, в котором реализован так называемый «бу-
ферный интерфейс», который напрямую дает доступ к собственному буферу памяти операциям, которые могут с ним работать. 
Запись бинарных данных – одна из таких операций.
Многие объекты также позволяют бинарным данным напрямую быть прочи-
танными в их память с помощью файлового метода readinto(). Например:
"""

a = array.array('i', [0, 0, 0, 0, 0, 0, 0, 0])
with open('files\data.bin', 'rb') as f:
    print(f.readinto(a))

"""
Однако нужно принять все меры предосторожности при использовании это-
го приема, поскольку он часто является платформозависимым и зависит от та-
ких вещей, как размер слова, порядок следования байтов (big-endian или littleendian).
См. рецепт 5.9, где приведен другой пример чтения бинарных данных
в изменяемый (mutable) буфер.
"""


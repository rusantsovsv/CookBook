"""
Вам нужна функция, которая принимает только именованные аргументы.

Эту возможность легко реализовать, если вы поместите именованные аргументы
после аргумента со звездочкой или символа звездочки. Например:
"""


def recv(maxsize, *, block):
    '''Receives a message'''
    pass

# recv(1024, True)                  TypeError: recv() takes 1 positional argument but 2 were given
recv(1024, block=True)              # Ok

"""
Этот прием может быть также использован для определения именованных ар-
гументов в функциях, которые принимают различное количество позиционных
аргументов. Например:
"""

def minimum(*values, clip=None):
    m = min(values)
    if clip is not None:
        m = clip if clip > m else m
    return m

print(minimum(1, 5, 2, -5, 10))
print(minimum(1, 5, 2, -5, 10, clip=0))

"""
Обязательные именованные аргументы часто являются хорошим способом уве-
личить понятность кода при определении необязательных аргументов. Напри-
мер, посмотрите на такой вызов:
msg = recv(1024, False)
Пользователь, который незнаком с функцией recv, не имеет представления
о том, что означает аргумент False. С другой стороны, такой вызов будет намного
более ясным:
msg = recv(1024, block=False)

Использование обязательных именованных аргументов часто предпочтитель-
нее трюков с применением **kwargs, поскольку они правильно показываются,
когда пользователь просит помощи:
"""

help(recv)

"""
Обязательные именованные аргументы также полезны в более продвинутых
применениях. Например, они могут быть использованы для внедрения аргумен-
тов в функции, которые применяют правила использования *args и **kwargs для
получения всех входных параметров. См. рецепт 9.11.
"""
"""
Вам нужно обработать элементы итерируемого объекта, но по какой-то причине
вы не хотите использовать цикл.

Чтобы вручную пройти по итерируемому объекту, используйте функцию next()
и напишите код так, чтобы он ловил исключение StopIteration. Например, в этом
случае мы вручную читаем строки из файла:
"""

with open('passw.txt') as f:
    try:
        while True:
            line = next(f)
            print(line, end='')
    except StopIteration:
        pass

"""
Обычно StopIteration используется для передачи сигнала о конце итерирования.
Однако если вы используете next() вручную, вы вместо этого можете запрограм-
мировать возвращение конечного значения, такого как None. Например:
"""

with open('passw.txt') as f:
    while True:
        line = next(f, None)
        if line is None:
            break
        print(line, end='')


"""
В большинстве случаев для прохода по итерируемому объекту используется цикл
for. Однако задачи иногда требуют более точного контроля лежащего в основе
механизма итераций. Также это полезно, для того чтобы разобраться, как он работает.
Следующий интерактивный пример иллюстрирует базовые механизмы того,
что происходит во время итерирования:
"""
items = [1, 2, 3]
# получаем итератор
# вызываем items.__iter__()
it = iter(items)
# запускаем итератор
# вызываем it.__next__()
print(next(it))
print(next(it))
print(next(it))

try:
    print(next(it))
except StopIteration as si:
    print('Остановка итерации:', si)

"""
Последующие рецепты в этой главе раскрывают подробности о приемах итери-
рования, что предполагает знание базового протокола итераторов. Убедитесь, что
этот первый рецепт прочно улегся у вас в памяти.
"""

"""
Вам нужно отформатировать число для вывода, контролируя количество знаков,
выравнивание, включение разделителя для разрядов и т. д.

Чтобы отформатировать одно число для вывода, используйте встроенную функ-
цию format(). Например:
"""

x = 1234.56789

# два десятичных знака точности
print(format(x, '0.2f'))

# выравнивание по правому краю в 10 символов, один знак точности
print(format(x, '>10.1f'))

# выравнивание по левому краю
print(format(x, '<10.1f'))

# выравнивание по центру
print(format(x, '^10.1f'))

# включение разделителя разрядов
print(format(x, ','))
print(format(x, '0,.1f'))

"""
Если вы хотите использовать экспоненциальную нотацию, измените f на e или
E (в зависимости от регистра, который вы хотите использовать для обозначения
экспоненты). Например:
"""

print(format(x, 'e'))
print(format(x, '0.2E'))

"""
Общая форма ширины и точности в обоих случаях такова: '[<>^]?width[,]?
(.digits)?', где width и digits – целые числа, а ? обозначает необязательные части. Тот
же формат используется в строковом методе format(). Например:
"""
print('The value is {:0,.2f}'.format(x))

"""
Форматирование чисел для вывода обычно вполне бесхитростно. Прием, по-
казанный выше, работает и для чисел с плавающей точкой, и для экземпляров
Decimal из модуля decimal.
Когда количество знаков ограничено, значения округляются таким же образом,
как и при использовании функции round(). Например:
"""

print(format(x, '0.1f'))
print(format(-x, '0.1f'))

"""
Обычное форматирование значений с добавлением разделителя разрядов ни-
чего не знает о принятых в конкретных странах традициях форматирования ты-
сячных разрядов. Если вам нужно принять во внимание эти традиции, обратите
внимание на функции модуля locale. Вы также можете заменить символ раздели-
теля разрядов, используя строковый метод translate(). Например:
"""

swap_separators = {ord('.'): ',', ord(','): '.'}
print(format(x, ',').translate(swap_separators))

"""
В мире все еще очень много кода, использующего форматирование чисел на
основе оператора %. Например:
"""

print('%0.2f' % x)
print('%10.1f' % x)
print('%-10.1f' % x)

"""
Это форматирование все еще приемлемо, но обладает меньшими возможностями,
нежели современный метод format(). Например, форматирование с помощью
оператора % не поддерживает добавление разделителя разрядов.
"""
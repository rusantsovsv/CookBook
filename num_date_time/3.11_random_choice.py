"""
Вы хотите выбрать случайные элементы из последовательности или сгенериро-
вать случайные числа.

Модуль random содержит разнообразные функции для генерации случайных чи-
сел и выбора случайных элементов. Например, чтобы выбрать случайный элемент
последовательности, используйте random.choice():
"""

import random
values = [1, 2, 3, 4, 5, 6]
for i in range(10):
    print(random.choice(values))

"""
Чтобы получить выборку из N элементов, используйте random.sample(). Каждый
элемент выбирается один раз, так что если значения в полученной выборке по-
вторяются, то это разные элементы оригинальной последовательности, имеющие
одинаковое значение:
"""
for i in range(2):
    print(random.sample(values, 2))

for i in range(2):
    print(random.sample(values, 3))

"""
Если вы хотите перемешать элементы в последовательности, используйте
random.shuffle():
"""
random.shuffle(values)
print(values)
random.shuffle(values)
print(values)

"""
Чтобы сгенерировать случайные целые числа, используйте random.randint():
"""

for i in range(10):
    print(random.randint(0, 10))

"""
Чтобы сгенерировать одинаковые по формату числа с плавающей точкой в диа-
пазоне от 0 до 1, используйте random.random():
"""

for i in range(5):
    print(random.random())

"""
Чтобы получить целое число из N случайных битов, используйте random.
getrandbits():
"""

print(random.getrandbits(200))

"""
Модуль random вычисляет случайные числа, используя алгоритм «вихрь Мерсен-
на» (Mersenne twister, MT). Это детерминированный алгоритм, но вы можете из-
менить начальную инциализацию с помощью функции random.seed():

random.seed()       # инициализация на базе системного времени или os.urandom()
random.seed(12345)  # инициализация на базе заданного целого числа
random.seed(b'bytedata')        # инициализация на базе байтовых данных

Вдобавок к уже продемонстрированной функциональности random включает
функции для равномерного, гауссова и других распределений вероятности. На-
пример, random.uniform() вычисляет равномерно распределенные числа, а random.
gauss() – нормально распределенные. За описанием других поддерживаемых рас-
пределений обратитесь к документации.
Функции в random не должны быть использованы в криптографических про-
граммах. Если вам нужна такая функциональность, обратитесь к функциям из
модуля ssl. Например, ssl.RAND_bytes() может быть использована для генерации
криптографически безопасных последовательностей случайных байтов.
"""

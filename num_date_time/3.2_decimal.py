"""
Вам нужно выполнить точные вычисления с десятичными дробями, и вы хотите
избавиться от небольших ошибок, которые обычно возникают при работе с чис-
лами с плавающей точкой.

Широко известный недостаток чисел с плавающей точкой в том, что они не могут
точно представить все 10 базовых десятичных цифр. Более того, даже простые ма-
тематические вычисления приводят к появлению небольших ошибок. Например:
"""

a = 4.2
b = 2.1
print(a + b)
print(a + b == 6.3)

"""
Эти ошибки – «особенность» процессора и стандарта представления чисел
с плавающей точкой IEEE 754, на основе которого работает модуль процессора для
вычислений с плавающей точкой. Поскольку в типе данных «числа с плавающей
точкой» Python хранит данные, используя нативное представление, вы ничего не
можете сделать, чтобы избавиться от ошибок при использовании экземпляров
float.
Если вам нужна большая точность (и вы готовы в некоторой степени поступить-
ся производительностью), то можете использовать модуль decimal:
"""

from decimal import Decimal
a = Decimal('4.2')
b = Decimal('2.1')
print(a + b)
print(a + b == Decimal('6.3'))


"""
На первый взгляд он может показаться странным (например, определение
чисел как строк). Однако объекты Decimal работают именно так, как вы можете
ожидать (поддерживают все обычные математические операции и т. д.). Если вы
выводите их или используете в функциях форматирования строк, они выглядят
как обычные числа.
Главное преимущество decimal в том, что он позволяет контролировать раз-
личные аспекты вычислений, такие как число знаков после точки и округление.
Чтобы это сделать, вы создаете локальный контекст и меняете его установки. На-
пример:
"""

from decimal import localcontext
a = Decimal('1.3')
b = Decimal('1.7')
print(a / b)
with localcontext() as ctx:
    ctx.prec = 3
    print(a / b)
with localcontext() as ctx:
    ctx.prec = 50
    print(a / b)

"""
Модуль decimal реализует «Общую спецификацию десятичной арифметики» («General
Decimal Arithmetic Specification») компании IBM. Нет нужды упоминать, что
у него есть очень много различных опций для конфигурирования, описание кото-
рых лежит за пределами возможностей данной книги.
Новички в Python могут склоняться к повсеместному использованию модуля
decimal для решения проблемы неточности, которая неизбежна при работе с типом
данных float. Однако важно понимать область применения вашего приложения.
Если вы работаете с научными или инженерными данными, компьютерной графи-
кой, то вполне нормально использовать обычный тип данных чисел с плавающей
точкой. В общем-то, очень немногие вещи в реальном мире измеряются с точно-
стью до 17-го знака после точки, которую предоставляет float. Так что небольшие
ошибки не так уж важны. А производительность нативных чисел с плавающей точ-
кой заметно выше, что важно при выполнении большого количества вычислений.
Но вы не должны просто полностью игнорировать ошибки. Математики проводят
немало времени, изучая различные алгоритмы, и некоторые обрабатывают ошибки
лучше других. Вы также должны быть осторожными с эффектами таких штук, как
вычитательная потеря точности и сложение больших и маленьких чисел. Например:
"""

nums = [1.23e+18, 1, -1.23e+18]
print(sum(nums))

"""
Ошибка из последнего примера может быть решена путем использования math.
fsum():
"""
import math
print(math.fsum(nums))

"""
Однако для других алгоритмов вам придется изучить реализацию и понять, как
они работают с точки зрения подобных ошибок.
Подведем итог: модуль decimal используется в основном в финансовых и про-
чих подобных приложениях. В таких программах небольшие ошибки в вычисле-
ниях ужасно мешают, а decimal позволяет от них избавиться. Также часто можно
встретить объекты класса Decimal в интерфейсах Python к базам данных – опять
же, особенно часто их используют для доступа к финансовым данным.
"""


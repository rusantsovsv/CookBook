"""
Вы хотите округлить число с плавающей точкой до заданного количества знаков
после точки.

Для простого округления используйте встроенную функцию round(value, ndigits).
Например:
"""
print(round(1.23, 1))
print(round(1.27, 1))
print(round(-1.27, 1))
print(round(1.25361, 3))

"""
Когда значение попадает точно между двух возможных выборов для округле-
ния, эта функция будет округлять к ближайшему четному значению. То есть 1.5
или 2.5 будут округлены до 2.

Количество знаков, которое передается функции round(), может быть отрица-
тельным. В этом случае округление будет идти до десятков, сотен, тысяч и т. д.
"""

a = 1627731
print(round(a, -1))
print(round(a, -2))
print(round(a, -3))

"""
Не перепутайте округление с форматированием значения для вывода. Если вы
хотите просто вывести число с некоторым определенным количеством знаков
после точки, обычно вам не требуется round(). Вместо этого просто задайте при
форматировании, сколько знаков выводить. Пример:
"""

x = 1.23456
print(format(x, '0.2f'))
print(format(x, '0.3f'))
print('value is {:0.3f}'.format(x))

"""
Сопротивляйтесь желанию округлить числа с плавающей точкой, чтобы испра-
вить проблемы с точностью вычислений. Например, вы можете подумывать по-
ступить так:
"""
a = 2.1
b = 4.2
c = a + b
print(c)
c = round(c, 2)         # "Исправленный" результат (???)
print(c)

"""
Для большинства программ, работающих с числами с плавающей точкой, просто
не нужно (и не рекомендуется) этого делать. Хотя есть незначительные ошибки
в вычислениях, поведение этих ошибок понятно и терпимо. Если необходимо из-
бежать таких ошибок (например, это может быть важно для финансовых прило-
жений), попробуйте модуль decimal, который обсуждается в следующем рецепте.
"""

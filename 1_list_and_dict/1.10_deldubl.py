"""
Вы хотите исключить дублирующиеся значения из последовательности, но при
этом сохранить порядок следования оставшихся элементов.
"""


def dedupe(items):
    seen = set()
    for item in items:
        if item not in seen:
            yield item
            seen.add(item)


a = [1, 5, 2, 1, 9, 1, 5, 10]
print(list(dedupe(a)))

"""
Это будет работать только в том случае, если элементы последовательности
хешируются. Если вы пытаетесь удалить дубликаты в последовательности из не-
хешируемых типов (таких как словари), то можете внести небольшое изменение
в этот рецепт. Например, такое:
"""


def dedupedict(items, key=None):
    seen = set()
    for item in items:
        val = item if key is None else key(item)
        if val not in seen:
            yield item
            seen.add(val)


"""
Аргумент key здесь нужен для определения функции, которая конвертирует
элементы последовательности в хешируемый тип, подходящий для поиска дубли-
катов. Вот как это работает:
"""

a = [{'x':1, 'y':2}, {'x':1, 'y':3}, {'x':1, 'y':2}, {'x':2, 'y':4}]
print(list(dedupedict(a, key=lambda d: (d['x'], d['y']))))
print(list(dedupedict(a, key=lambda d: d['x'])))

"""
Последнее решение также отлично работает, если вам нужно удалить дублика-
ты, базируясь на значении одного поля или атрибута либо более крупной струк-
туры данных.
"""

"""
Вы хотите срезать ненужные символы, такие как пробелы в начале, в конце или
в середине текстовой строки.

Метод strip() можно использовать для срезания символов в начале или конце
строки. lstrip() и rstrip() выполняют срезание слева и справа соответственно. По
умолчанию они срезают пробел, однако им можно передать и другие символы.
Например:
"""

# срезание пробелов
s = ' hello world \n'
print(s.strip())
print(s.lstrip())
print(s.rstrip())

# срезание символов
t = '-------hello======='
print(t.lstrip('-'))
print(t.rstrip('='))
print(t.strip('-='))

"""
Различные методы strip() часто используются при чтении и чистке данных для по-
следующей обработки. Например, вы можете использовать их, чтобы избавиться
от пробелов, удалить кавычки и т. д.
Обратите внимание, что срезание символов нельзя применить к тексту в сере-
дине строки. Например:
"""
s = '   hello                   world      \n'
s = s.strip()
print(s)

"""
Если вам нужно что-то сделать с внутренним пробелом, вам нужно применить
другой прием, такой как использование метода replace() или подстановка с ис-
пользованием регулярного выражения. Например:
"""

print(s.replace(' ', ''))
import re
print(re.sub('\s+', ' ', s))

"""
Часто вам нужно сочетать срезание символов с другими видами итерационной
обработки, такими как чтение строк данных из файла. Если это так, то стоит при-
менить выражение-генератор:
with open(filename) as f:
lines = (line.strip() for line in f)
for line in lines:
...
Здесь выражение lines = (line.strip() for line in f) работает как преобразователь
данных. Это эффективно, потому что оно не читает данные из какого-либо вре-
менного списка. Оно просто создает итератор, где ко всем производимым стро-
кам применена операция срезания символов.
Для более продвинутого срезания вам стоит обратиться к методу translate(). Де-
тали вы найдете в следующем рецепте, где описана чистка строк.
"""
"""
Вам нужно разделить строку на поля, но разделители (и пробелы вокруг них)
внутри строки разные.

Функция split() на строковом объекте предназначена для очень простых случаев:
не допускает использования нескольких разделителей и не учитывает возможные
пробелы вокруг разделителей. В случаях когда вам нужно немного больше гибко-
сти, используйте метод re.split ():
"""
import re

line = 'asdf fjdk; afed, fjek,asdf,        foo'
print(re.split(r'[;,\s]\s*', line))

"""
Функция re.split() будет в этом случае весьма полезной, поскольку вы сможете
определить многочисленные шаблоны разделителей. Например, как показано
в решении, разделитель может быть запятой (,), точкой с запятой (;) или пробелом,
за которым следует любое количество дополнительных пробелов. Какой бы из этих
шаблонов не был найден, совпадение становится разделителем. Результатом будет
просто список полей – точно такой же, какой создает строковый метод str.split().
При применении re.split() вы должны быть осторожными, если шаблон регуляр-
ного выражения использует группу, заключенную в скобки. При использовании
групп совпавший с шаблоном текст также включается в результат. Например:
"""
fields = re.split(r'(;|,|\s)\s*', line)
print(fields)

"""
Получение символов-разделителей может быть полезным в некоторых обстоятельствах.
Например, вам могут потребоваться эти символы позже – для перефор-
матирования выводимой строки:
"""

values = fields[::2]
delimiters = fields[1::2] + ['']

# Переформатируем строку, используя те же разделители
print(''.join(v + d for v, d in zip(values, delimiters)))

"""
Если вы не хотите, чтобы разделители попали в результат, но при этом вам
нужно применить группы в шаблоне регулярного выражения, убедитесь, что вы
используете незахватывающую (noncapture) группу, которая определяется так:
(?:...). Например:
"""

print(re.split(r'(?:,|;|\s)\s*', line))

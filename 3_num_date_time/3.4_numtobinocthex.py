"""
Вам нужно преобразовать выводимые целые числа в бинарное, восьмеричное или
шестнадцатеричное представление.

Чтобы преобразовать целое число в бинарное, восьмеричное или шестнадцате-
ричное представление, используйте функции bin(), oct() или hex() соответственно:
"""

x = 1234
print(bin(x))
print(oct(x))
print(hex(x))

"""
Или вы можете использовать функцию format(), если не хотите, чтобы появля-
лись префиксы 0b, 0o или 0x. Например:
"""

print(format(x, 'b'))
print(format(x, 'o'))
print(format(x, 'x'))

"""
Целые числа имеют знак, поэтому если вы работаете с отрицательными значе-
ниями, то вывод также будет включать знак. Например:
"""
x = -1234
print(format(x, 'b'))
print(format(x, 'x'))

"""
Если вы хотите вывести значение без знака, вам нужно добавить максимальное
значение, чтобы установить длину бита. Например, чтобы вывести 32-битное зна-
чение, можно поступить так:
"""

print(format(2**32 + x, 'b'))
print(format(2**32 + x, 'x'))

"""
Чтобы преобразовать строки с целыми числами в числа с разными основания-
ми, используйте функцию int(), указав нужное основание. Например:
"""

print(int('4d2', 16))
print(int('10011010010', 2))

"""
По большей части работа с бинарными, восьмеричными и шестнадцатеричными
целыми числами прямолинейна. Просто запомните, что эти преобразования от-
носятся только к выводу разных текстовых представлений чисел. «Под капотом»
это один и тот же тип целых чисел.
Предупреждение для программистов, работающих с восьмеричными числами:
синтаксис Python для определения восьмеричных значений немного отличается
от реализованного в большинстве других языков. Если вы попробуете сделать это
так, то получите синтаксическую ошибку:
"""

import os
# os.chmod('script.py', 0755)                   # SyntaxError: invalid token

"""Убедитесь, что вы вводите восьмеричное значение с префиксом 0o, как пока-
зано тут:"""

# os.chmod('script.py', 0o755)